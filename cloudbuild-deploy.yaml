# Cloud Build configuration for building and deploying to GKE
# This builds Docker images and deploys them to Kubernetes cluster

steps:
  # Step 1: Build all Docker images in parallel
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-auth-service'
    args:
      - 'build'
      - '-f'
      - 'user_auth/Dockerfile'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/auth-service:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/auth-service:latest'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-text-extraction-service'
    args:
      - 'build'
      - '-f'
      - 'text_extraction/Dockerfile'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-extraction-service:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-extraction-service:latest'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-text-summarization-service'
    args:
      - 'build'
      - '-f'
      - 'text_summarization/Dockerfile'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-summarization-service:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-summarization-service:latest'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend-service'
    args:
      - 'build'
      - '-f'
      - 'frontend/Dockerfile'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/frontend:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/frontend:latest'
      - './frontend'

  # Step 2: Push all images to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-auth-service'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/auth-service']
    waitFor: ['build-auth-service']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-text-extraction-service'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-extraction-service']
    waitFor: ['build-text-extraction-service']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-text-summarization-service'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-summarization-service']
    waitFor: ['build-text-summarization-service']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend-service'
    args: ['push', '--all-tags', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/frontend']
    waitFor: ['build-frontend-service']

  # Step 3: Deploy to GKE cluster
  - name: 'gcr.io/cloud-builders/gke-deploy'
    id: 'deploy-to-gke'
    args:
      - 'run'
      - '--filename=kubernetes/'
      - '--cluster=${_CLUSTER_NAME}'
      - '--location=${_REGION}'
      - '--namespace=doc-intel-app'
    waitFor: 
      - 'push-auth-service'
      - 'push-text-extraction-service' 
      - 'push-text-summarization-service'

  # Step 4: Deploy Frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend-cloud-run'
    args:
      - 'run'
      - 'deploy'
      - 'frontend'
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/frontend:${SHORT_SHA}'
      - '--platform=managed'
      - '--region=${_REGION}'
      - '--allow-unauthenticated'
      - '--port=3000'
      - '--memory=1Gi'
      - '--cpu=1'
      - '--min-instances=0'
      - '--max-instances=10'
      - '--set-env-vars=NEXT_PUBLIC_AUTH_SERVICE_URL=https://${_BACKEND_DOMAIN}/auth,NEXT_PUBLIC_EXTRACTION_SERVICE_URL=https://${_BACKEND_DOMAIN}/extract,NEXT_PUBLIC_SUMMARIZATION_SERVICE_URL=https://${_BACKEND_DOMAIN}/summarize'
    waitFor: ['push-frontend-service']

  # Step 5: Update Kubernetes deployments with new image tags
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'update-deployments'
    args:
      - 'set'
      - 'image'
      - 'deployment/auth-deployment'
      - 'auth-service=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/auth-service:${SHORT_SHA}'
      - '--namespace=doc-intel-app'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor: ['deploy-to-gke']

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'update-text-extraction'
    args:
      - 'set'
      - 'image'
      - 'deployment/text-extraction-deployment'
      - 'text-extraction-service=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-extraction-service:${SHORT_SHA}'
      - '--namespace=doc-intel-app'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor: ['deploy-to-gke']

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'update-text-summarization'
    args:
      - 'set'
      - 'image'
      - 'deployment/text-summarisation-deployment'
      - 'text-summarisation-service=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/text-summarization-service:${SHORT_SHA}'
      - '--namespace=doc-intel-app'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor: ['deploy-to-gke']

# Configuration
options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

# Substitution variables
substitutions:
  _REGION: 'asia-south1'
  _REPOSITORY: 'document-intelligence-containers'
  _CLUSTER_NAME: 'doc-intel-gke'
  _BACKEND_DOMAIN: 'your-backend-domain.com'  # Update with actual domain

# Build timeout
timeout: '2400s'  # 40 minutes

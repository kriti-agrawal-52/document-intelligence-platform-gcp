name: Deploy to GCP

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  PROJECT_ID: doc-intelligence-1758210325
  REGION: asia-south1
  REPOSITORY: document-intelligence-containers
  CLUSTER_NAME: doc-intel-gke

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # For Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }}

      # Build and push backend services
      - name: Build and push Auth Service
        run: |
          docker build -f user_auth/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/auth-service:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/auth-service:latest .
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/auth-service

      - name: Build and push Text Extraction Service
        run: |
          docker build -f text_extraction/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-extraction-service:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-extraction-service:latest .
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-extraction-service

      - name: Build and push Text Summarization Service
        run: |
          docker build -f text_summarization/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-summarization-service:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-summarization-service:latest .
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-summarization-service

      - name: Build and push Frontend
        run: |
          docker build -f frontend/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:latest ./frontend
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend

      # Deploy Kubernetes manifests
      - name: Install External Secrets Operator
        run: |
          # Install External Secrets Operator using Helm
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update
          helm upgrade --install external-secrets external-secrets/external-secrets \
            --namespace external-secrets-system \
            --create-namespace \
            --wait

      - name: Deploy Kubernetes resources
        run: |
          # Apply Kubernetes manifests in order
          kubectl apply -f kubernetes/00-namespace.yaml
          
          # Wait for External Secrets Operator to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/external-secrets -n external-secrets-system
          kubectl wait --for=condition=available --timeout=300s deployment/external-secrets-webhook -n external-secrets-system
          kubectl wait --for=condition=available --timeout=300s deployment/external-secrets-cert-controller -n external-secrets-system
          
          # Wait for CRDs to be available
          echo "Waiting for External Secrets CRDs to be available..."
          for i in {1..30}; do
            if kubectl get crd secretstores.external-secrets.io externalsecrets.external-secrets.io &>/dev/null; then
              echo "CRDs are available!"
              break
            fi
            echo "Waiting for CRDs... ($i/30)"
            sleep 10
          done
          
          # Verify CRDs exist and check their versions
          kubectl get crd secretstores.external-secrets.io
          kubectl get crd externalsecrets.external-secrets.io
          
          # Check CRD details and available versions
          echo "Checking SecretStore CRD versions..."
          kubectl get crd secretstores.external-secrets.io -o jsonpath='{.spec.versions[*].name}' || true
          echo ""
          echo "Checking ExternalSecret CRD versions..."
          kubectl get crd externalsecrets.external-secrets.io -o jsonpath='{.spec.versions[*].name}' || true
          echo ""
          
          # Wait a bit more for API server to fully register the CRDs
          echo "Waiting additional time for API server to register CRDs..."
          sleep 30
          
          # Test if we can access the API
          kubectl api-resources | grep external-secrets || true
          
          # Try to apply External Secrets configuration, fallback to regular secrets if it fails
          if ! kubectl apply -f kubernetes/01-external-secrets.yaml; then
            echo "External Secrets failed, falling back to regular Kubernetes secrets..."
            echo "Creating secrets from GitHub secrets..."
            
            # Create secrets using GitHub secrets
            kubectl create secret generic db-credentials \
              --namespace=doc-intel-app \
              --from-literal=MYSQL_USER="app_user" \
              --from-literal=MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
              --from-literal=MYSQL_HOST="10.20.0.5" \
              --from-literal=MYSQL_PORT="3306" \
              --dry-run=client -o yaml | kubectl apply -f -
            
            kubectl create secret generic api-keys \
              --namespace=doc-intel-app \
              --from-literal=JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              --dry-run=client -o yaml | kubectl apply -f -
            
            kubectl create secret generic gcp-config \
              --namespace=doc-intel-app \
              --from-literal=GCP_PROJECT_ID="${{ env.PROJECT_ID }}" \
              --from-literal=GCP_REGION="${{ env.REGION }}" \
              --from-literal=REDIS_HOST="10.20.1.3" \
              --from-literal=REDIS_PORT="6379" \
              --from-literal=GCS_USER_IMAGES_BUCKET="document-intelligence-user-images-8jpemsgr" \
              --from-literal=PUBSUB_TOPIC_NAME="summarization-jobs" \
              --from-literal=PUBSUB_SUBSCRIPTION_NAME="summarization-jobs-subscription" \
              --dry-run=client -o yaml | kubectl apply -f -
            
            kubectl create secret generic mongodb-credentials \
              --namespace=doc-intel-app \
              --from-literal=MONGODB_USER="${{ secrets.MONGODB_USER }}" \
              --from-literal=MONGODB_PASSWORD="${{ secrets.MONGODB_PASSWORD }}" \
              --from-literal=MONGODB_HOST="mongodb-service" \
              --from-literal=MONGODB_PORT="27017" \
              --from-literal=MONGO_CONNECTION_STRING="mongodb://${{ secrets.MONGODB_USER }}:${{ secrets.MONGODB_PASSWORD }}@mongodb-service:27017/doc_intel_db?authSource=admin" \
              --from-literal=MONGO_DATABASE_NAME="doc_intel_db" \
              --from-literal=MONGO_COLLECTION_NAME="extracted_texts" \
              --dry-run=client -o yaml | kubectl apply -f -
          fi
          # Replace IMAGE_TAG placeholder with actual SHA in deployment files
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/03-auth-deployment.yaml
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/04-text-extraction-deployment.yaml  
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/08-text-summarization-deployment.yaml
          
          kubectl apply -f kubernetes/11-mysql-external-service.yaml
          kubectl apply -f kubernetes/09-mongodb-deployment.yaml
          kubectl apply -f kubernetes/03-auth-deployment.yaml
          kubectl apply -f kubernetes/04-text-extraction-deployment.yaml
          kubectl apply -f kubernetes/08-text-summarization-deployment.yaml
          kubectl apply -f kubernetes/06-loadbalancer-services.yaml
          kubectl apply -f kubernetes/05-gcp-ingress.yaml
          
          # Check deployment status before waiting
          echo "Checking deployment status..."
          kubectl get deployments -n doc-intel-app || true
          kubectl get pods -n doc-intel-app || true
          
          # Wait for deployments to be ready (with shorter timeout since images might not be updated yet)
          echo "Waiting for initial deployments (may fail if images not updated yet)..."
          kubectl wait --for=condition=available --timeout=60s deployment/auth-deployment -n doc-intel-app || echo "Auth deployment not ready yet (expected)"
          kubectl wait --for=condition=available --timeout=60s deployment/text-extraction-deployment -n doc-intel-app || echo "Text extraction deployment not ready yet (expected)"
          kubectl wait --for=condition=available --timeout=60s deployment/text-summarisation-deployment -n doc-intel-app || echo "Text summarization deployment not ready yet (expected)"

      # Update Kubernetes deployments with new images
      # Deployments are now updated declaratively via kubectl apply above
      # No need for kubectl set image commands - GitOps approach!

      # Wait for updated deployments and debug any issues
      - name: Wait for deployments and debug issues
        run: |
          echo "Waiting for deployments to be ready with new images..."
          
          # Check deployment status
          kubectl get deployments -n doc-intel-app
          kubectl describe deployment auth-deployment -n doc-intel-app
          
          # Check pod status
          kubectl get pods -n doc-intel-app
          
          # Wait for deployments with longer timeout
          kubectl wait --for=condition=available --timeout=600s deployment/auth-deployment -n doc-intel-app || {
            echo "Auth deployment failed, checking logs..."
            kubectl describe deployment auth-deployment -n doc-intel-app
            kubectl get pods -l app=auth-service -n doc-intel-app
            kubectl logs -l app=auth-service -n doc-intel-app --tail=50 || true
          }
          
          kubectl wait --for=condition=available --timeout=300s deployment/text-extraction-deployment -n doc-intel-app || {
            echo "Text extraction deployment failed, checking logs..."
            kubectl logs -l app=text-extraction-service -n doc-intel-app --tail=50 || true
          }
          
          kubectl wait --for=condition=available --timeout=300s deployment/text-summarisation-deployment -n doc-intel-app || {
            echo "Text summarization deployment failed, checking logs..."
            kubectl logs -l app=text-summarisation-service -n doc-intel-app --tail=50 || true
          }

      # Deploy Frontend to Cloud Run
      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy frontend \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=3000 \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NEXT_PUBLIC_AUTH_SERVICE_URL=https://34.102.207.209,NEXT_PUBLIC_EXTRACTION_SERVICE_URL=https://34.102.207.209,NEXT_PUBLIC_SUMMARIZATION_SERVICE_URL=https://34.102.207.209"

      # Verify deployments
      - name: Verify backend deployments
        run: |
          kubectl rollout status deployment/auth-deployment --namespace=doc-intel-app --timeout=300s
          kubectl rollout status deployment/text-extraction-deployment --namespace=doc-intel-app --timeout=300s
          kubectl rollout status deployment/text-summarisation-deployment --namespace=doc-intel-app --timeout=300s

      - name: Get deployment status
        run: |
          echo "=== Backend Services Status ==="
          kubectl get deployments --namespace=doc-intel-app
          echo ""
          echo "=== Frontend Cloud Run Status ==="
          gcloud run services describe frontend --region=${{ env.REGION }} --format="value(status.url)"

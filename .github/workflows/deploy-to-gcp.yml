name: Deploy to GCP

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  PROJECT_ID: doc-intelligence-1758210325
  REGION: asia-south1
  REPOSITORY: document-intelligence-containers
  CLUSTER_NAME: doc-intel-gke

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # For Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }}

      # Build and push backend services
      - name: Build and push Auth Service
        run: |
          docker build -f user_auth/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/auth-service:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/auth-service:latest .
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/auth-service

      - name: Build and push Text Extraction Service
        run: |
          docker build -f text_extraction/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-extraction-service:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-extraction-service:latest .
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-extraction-service

      - name: Build and push Text Summarization Service
        run: |
          docker build -f text_summarization/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-summarization-service:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-summarization-service:latest .
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/text-summarization-service

      - name: Build and push Frontend
        run: |
          docker build -f frontend/Dockerfile \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:latest ./frontend
          docker push --all-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend

      # Deploy Kubernetes manifests
      - name: Install External Secrets Operator
        run: |
          # Install External Secrets Operator using Helm
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update
          helm upgrade --install external-secrets external-secrets/external-secrets \
            --namespace external-secrets-system \
            --create-namespace \
            --wait

      - name: Deploy Kubernetes resources
        run: |
          # Apply Kubernetes manifests in order
          kubectl apply -f kubernetes/00-namespace.yaml
          
          # Wait for External Secrets Operator to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/external-secrets -n external-secrets-system
          kubectl wait --for=condition=available --timeout=300s deployment/external-secrets-webhook -n external-secrets-system
          kubectl wait --for=condition=available --timeout=300s deployment/external-secrets-cert-controller -n external-secrets-system
          
          # Wait for CRDs to be available
          echo "Waiting for External Secrets CRDs to be available..."
          for i in {1..30}; do
            if kubectl get crd secretstores.external-secrets.io externalsecrets.external-secrets.io &>/dev/null; then
              echo "CRDs are available!"
              break
            fi
            echo "Waiting for CRDs... ($i/30)"
            sleep 10
          done
          
          # Verify CRDs exist and check their versions
          kubectl get crd secretstores.external-secrets.io
          kubectl get crd externalsecrets.external-secrets.io
          
          # Check CRD details and available versions
          echo "Checking SecretStore CRD versions..."
          kubectl get crd secretstores.external-secrets.io -o jsonpath='{.spec.versions[*].name}' || true
          echo ""
          echo "Checking ExternalSecret CRD versions..."
          kubectl get crd externalsecrets.external-secrets.io -o jsonpath='{.spec.versions[*].name}' || true
          echo ""
          
          # Wait a bit more for API server to fully register the CRDs
          echo "Waiting additional time for API server to register CRDs..."
          sleep 30
          
          # Test if we can access the API
          kubectl api-resources | grep external-secrets || true
          
          # Try to apply External Secrets configuration, fallback to regular secrets if it fails
          if ! kubectl apply -f kubernetes/01-external-secrets.yaml; then
            echo "External Secrets failed, falling back to regular Kubernetes secrets..."
            echo "Creating secrets from GitHub secrets..."
            
            # Create secrets using GitHub secrets
            kubectl create secret generic db-credentials \
              --namespace=doc-intel-app \
              --from-literal=MYSQL_USER="app_user" \
              --from-literal=MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
              --from-literal=MYSQL_HOST="10.20.0.5" \
              --from-literal=MYSQL_PORT="3306" \
              --dry-run=client -o yaml | kubectl apply -f -
            
            kubectl create secret generic api-keys \
              --namespace=doc-intel-app \
              --from-literal=JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              --dry-run=client -o yaml | kubectl apply -f -
            
            kubectl create secret generic gcp-config \
              --namespace=doc-intel-app \
              --from-literal=GCP_PROJECT_ID="${{ env.PROJECT_ID }}" \
              --from-literal=GCP_REGION="${{ env.REGION }}" \
              --from-literal=REDIS_HOST="10.20.1.3" \
              --from-literal=REDIS_PORT="6379" \
              --from-literal=GCS_USER_IMAGES_BUCKET="document-intelligence-user-images-8jpemsgr" \
              --from-literal=PUBSUB_TOPIC_NAME="summarization-jobs" \
              --from-literal=PUBSUB_SUBSCRIPTION_NAME="summarization-jobs-subscription" \
              --dry-run=client -o yaml | kubectl apply -f -
            
            kubectl create secret generic mongodb-credentials \
              --namespace=doc-intel-app \
              --from-literal=MONGODB_USER="${{ secrets.MONGODB_USER }}" \
              --from-literal=MONGODB_PASSWORD="${{ secrets.MONGODB_PASSWORD }}" \
              --from-literal=MONGODB_HOST="mongodb-service" \
              --from-literal=MONGODB_PORT="27017" \
              --from-literal=MONGO_CONNECTION_STRING="mongodb://${{ secrets.MONGODB_USER }}:${{ secrets.MONGODB_PASSWORD }}@mongodb-service:27017/doc_intel_db?authSource=admin" \
              --from-literal=MONGO_DATABASE_NAME="doc_intel_db" \
              --from-literal=MONGO_COLLECTION_NAME="extracted_texts" \
              --dry-run=client -o yaml | kubectl apply -f -
          fi
          # Replace IMAGE_TAG placeholder with actual SHA in deployment files
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/03-auth-deployment.yaml
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/04-text-extraction-deployment.yaml  
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" kubernetes/08-text-summarization-deployment.yaml
          
          # Apply Kubernetes resources (HTTP-only for simplicity)
          kubectl apply -f kubernetes/11-mysql-external-service.yaml
          kubectl apply -f kubernetes/09-mongodb-deployment.yaml
          kubectl apply -f kubernetes/16-backend-config.yaml
          kubectl apply -f kubernetes/03-auth-deployment.yaml
          kubectl apply -f kubernetes/04-text-extraction-deployment.yaml
          kubectl apply -f kubernetes/08-text-summarization-deployment.yaml
          kubectl apply -f kubernetes/05-gcp-ingress.yaml
          
          # Check deployment status before waiting
          echo "Checking deployment status..."
          kubectl get deployments -n doc-intel-app || true
          kubectl get pods -n doc-intel-app || true
          
          # Wait for deployments to be ready (with shorter timeout since images might not be updated yet)
          echo "Waiting for initial deployments (may fail if images not updated yet)..."
          kubectl wait --for=condition=available --timeout=60s deployment/auth-deployment -n doc-intel-app || echo "Auth deployment not ready yet (expected)"
          kubectl wait --for=condition=available --timeout=60s deployment/text-extraction-deployment -n doc-intel-app || echo "Text extraction deployment not ready yet (expected)"
          kubectl wait --for=condition=available --timeout=60s deployment/text-summarisation-deployment -n doc-intel-app || echo "Text summarization deployment not ready yet (expected)"

      # Update Kubernetes deployments with new images
      # Deployments are now updated declaratively via kubectl apply above
      # No need for kubectl set image commands - GitOps approach!

      # Wait for updated deployments and debug any issues
      - name: Wait for deployments and debug issues
        run: |
          echo "Waiting for deployments to be ready with new images..."
          
          # Check deployment status
          kubectl get deployments -n doc-intel-app
          kubectl describe deployment auth-deployment -n doc-intel-app
          
          # Check pod status
          kubectl get pods -n doc-intel-app
          
          # Wait for deployments with longer timeout
          kubectl wait --for=condition=available --timeout=600s deployment/auth-deployment -n doc-intel-app || {
            echo "Auth deployment failed, checking logs..."
            kubectl describe deployment auth-deployment -n doc-intel-app
            kubectl get pods -l app=auth-service -n doc-intel-app
            kubectl logs -l app=auth-service -n doc-intel-app --tail=50 || true
          }
          
          kubectl wait --for=condition=available --timeout=300s deployment/text-extraction-deployment -n doc-intel-app || {
            echo "Text extraction deployment failed, checking logs..."
            kubectl logs -l app=text-extraction-service -n doc-intel-app --tail=50 || true
          }
          
          kubectl wait --for=condition=available --timeout=300s deployment/text-summarisation-deployment -n doc-intel-app || {
            echo "Text summarization deployment failed, checking logs..."
            kubectl logs -l app=text-summarisation-service -n doc-intel-app --tail=50 || true
          }

      # Wait for HTTPS ingress to be fully ready before deploying frontend
      - name: Wait for HTTPS ingress and SSL certificate
        run: |
          echo "⏳ Waiting for ingress LoadBalancer and SSL certificate to be ready..."
          echo "This ensures frontend can make HTTPS → HTTPS requests without mixed content issues."
          
          # Wait for ingress IP assignment (up to 10 minutes)
          INGRESS_IP=""
          for i in {1..20}; do
            INGRESS_IP=$(kubectl get ingress doc-intel-ingress -n doc-intel-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ ! -z "$INGRESS_IP" ]; then
              echo "✅ Ingress IP assigned: $INGRESS_IP"
              break
            fi
            echo "⏳ Waiting for ingress IP assignment... ($i/20) - 30s intervals"
            sleep 30
          done
          
          if [ -z "$INGRESS_IP" ]; then
            echo "⚠️ Ingress IP not ready after 10 minutes, using static IP"
            INGRESS_IP="34.102.207.209"
          fi
          
          # Test HTTP ingress readiness with extended timeout
          echo "🔍 Testing HTTP ingress readiness on $INGRESS_IP..."
          echo "💡 Note: GCP Load Balancer health checks can take 10-15 minutes to propagate"
          
          INGRESS_READY=false
          for i in {1..15}; do
            echo "⏳ Waiting for HTTP ingress... ($i/15) - 30s intervals (Total: $((i*30/60)) min)"
            if curl -s -w "%{http_code}" http://$INGRESS_IP/auth/health 2>/dev/null | grep -q "200"; then
              echo "✅ HTTP ingress is ready!"
              INGRESS_READY=true
              break
            fi
            sleep 30
          done
          
          if [ "$INGRESS_READY" = false ]; then
            echo "⚠️  Ingress not ready after 7.5 minutes, but continuing deployment"
            echo "🔍 This is normal for GCP - health checks may take up to 15 minutes"
            echo "📋 Backend health status:"
            kubectl get ingress doc-intel-ingress -n doc-intel-app -o jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/backends}' || true
          fi
          
          # Set environment variable for frontend deployment
          echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV

      # Deploy Frontend to Cloud Run with HTTP ingress (development setup)
      - name: Deploy Frontend to Cloud Run
        run: |
          echo "🚀 Deploying frontend with HTTP backend URLs: http://$INGRESS_IP"
          echo "Note: Using HTTP for development - no SSL complexity"
          gcloud run deploy frontend \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=3000 \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NEXT_PUBLIC_AUTH_SERVICE_URL=http://$INGRESS_IP,NEXT_PUBLIC_EXTRACTION_SERVICE_URL=http://$INGRESS_IP,NEXT_PUBLIC_SUMMARIZATION_SERVICE_URL=http://$INGRESS_IP"

      # Verify deployments with comprehensive ALB/Ingress debugging
      - name: Verify backend deployments and ALB status
        run: |
          echo "🔍 COMPREHENSIVE BACKEND & ALB VERIFICATION"
          echo "=========================================="
          
          # 1. Verify deployment rollout status
          echo "📋 1. Checking deployment rollout status..."
          kubectl rollout status deployment/auth-deployment --namespace=doc-intel-app --timeout=300s
          kubectl rollout status deployment/text-extraction-deployment --namespace=doc-intel-app --timeout=300s
          kubectl rollout status deployment/text-summarisation-deployment --namespace=doc-intel-app --timeout=300s
          
          # 2. Check pod health and readiness
          echo ""
          echo "🏥 2. Pod Health Status:"
          kubectl get pods -n doc-intel-app -o wide
          
          # 3. Check service configurations
          echo ""
          echo "🌐 3. Service Configurations:"
          kubectl get services -n doc-intel-app
          
          # 4. Comprehensive Ingress Debugging
          echo ""
          echo "🔍 4. INGRESS & ALB DEBUGGING:"
          echo "=============================="
          
          # Basic ingress info
          echo "📋 Ingress Basic Info:"
          kubectl get ingress -n doc-intel-app
          
          # Detailed ingress description
          echo ""
          echo "📋 Ingress Detailed Status:"
          kubectl describe ingress doc-intel-ingress -n doc-intel-app
          
          # Backend health status
          echo ""
          echo "❤️  Backend Health Status:"
          kubectl get ingress doc-intel-ingress -n doc-intel-app -o jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/backends}' | python3 -c "
          import sys, json
          try:
              data = json.loads(sys.stdin.read())
              print('Backend Health Status:')
              for backend, status in data.items():
                  service_name = backend.split('-')[-3:-1]  # Extract service name
                  print(f'  - {\"_\".join(service_name)}: {status}')
          except:
              print('  Could not parse backend status')
          " || echo "  Backend status not available yet"
          
          # Check ingress events
          echo ""
          echo "📋 Recent Ingress Events:"
          kubectl get events -n doc-intel-app --field-selector involvedObject.name=doc-intel-ingress --sort-by='.lastTimestamp' | tail -10 || true
          
          # 5. Test connectivity to individual services
          echo ""
          echo "🧪 5. SERVICE CONNECTIVITY TESTS:"
          echo "================================="
          
          # Get ingress IP
          INGRESS_IP=$(kubectl get ingress doc-intel-ingress -n doc-intel-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "34.102.207.209")
          echo "🌐 Testing via Ingress IP: $INGRESS_IP"
          
          # Test each service endpoint
          for service in "auth:8000:/auth/health" "extract:8001:/extract/health" "summarize:8002:/summarize/health"; do
            name=$(echo $service | cut -d: -f1)
            path=$(echo $service | cut -d: -f3)
            echo ""
            echo "Testing $name service at $path..."
            
            # Test with detailed curl output
            response=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" http://$INGRESS_IP$path 2>/dev/null || echo "HTTPSTATUS:000;TIME:timeout")
            http_code=$(echo $response | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            time_total=$(echo $response | grep -o "TIME:[0-9.]*" | cut -d: -f2)
            response_body=$(echo $response | sed 's/HTTPSTATUS:[0-9]*;TIME:[0-9.]*//')
            
            if [ "$http_code" = "200" ]; then
              echo "  ✅ $name: HTTP $http_code (${time_total}s) - $response_body"
            else
              echo "  ❌ $name: HTTP $http_code (${time_total}s)"
            fi
          done
          
          # 6. Check for common GCP Load Balancer issues
          echo ""
          echo "🔍 6. GCP LOAD BALANCER DIAGNOSTICS:"
          echo "===================================="
          
          # Check if services have proper annotations
          echo "📋 Service Annotations Check:"
          for service in auth-service text-extraction-service text-summarization-service; do
            echo "  Checking $service annotations..."
            kubectl get service $service -n doc-intel-app -o jsonpath='{.metadata.annotations}' | python3 -c "
            import sys, json
            try:
                data = json.loads(sys.stdin.read())
                neg = data.get('cloud.google.com/neg', 'MISSING')
                backend_config = data.get('cloud.google.com/backend-config', 'MISSING')
                print(f'    NEG: {neg}')
                print(f'    BackendConfig: {backend_config}')
            except:
                print('    Could not parse annotations')
            " || echo "    Service not found or no annotations"
          done
          
          # 7. Final status summary
          echo ""
          echo "📊 7. FINAL STATUS SUMMARY:"
          echo "=========================="
          echo "🏗️  Deployments: $(kubectl get deployments -n doc-intel-app --no-headers | wc -l) total"
          echo "🏥 Ready Pods: $(kubectl get pods -n doc-intel-app --no-headers | grep -c Running) running"
          echo "🌐 Services: $(kubectl get services -n doc-intel-app --no-headers | wc -l) total"
          echo "🔗 Ingress IP: $INGRESS_IP"
          
          # Check if any pods are not ready
          not_ready=$(kubectl get pods -n doc-intel-app --no-headers | grep -v "1/1.*Running" | wc -l)
          if [ $not_ready -gt 0 ]; then
            echo "⚠️  Warning: $not_ready pods are not ready"
            kubectl get pods -n doc-intel-app | grep -v "1/1.*Running" || true
          fi

      - name: Get deployment status
        run: |
          echo "=== Backend Services Status ==="
          kubectl get deployments --namespace=doc-intel-app
          echo ""
          echo "=== Frontend Cloud Run Status ==="
          gcloud run services describe frontend --region=${{ env.REGION }} --format="value(status.url)"
